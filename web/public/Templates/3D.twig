<script src="https://threejs.org/build/three.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.3/jquery.min.js" integrity="sha512-STof4xm1wgkfm7heWqFJVn58Hm3EtS31XFaagaa8VMReCXAkQnJZ+jEy8PCC/iT18dFy95WcExNHFTqLyp72eQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<h1>Response from <code>/render/user/1/3d</code></h1>
<code>{{ Thumbnail }}</code>
<hr>
<div id="thumbnail-container" class="my-2 position-relative d-flex justify-content-center">
    <div class="position-relative text-center my-2" style="max-width:250px">
        <img src="" class="position-absolute" style="bottom: 0;left: 0px;">
    </div>
    <div class="d-none" id="three-dee-spinner">
        <div class="text-center d-inline-flex align-items-center justify-content-center" style="height: 250px; width: 250px">
            <div class="spinner-border text-dark" role="status">
                <img src="/Images/blockLoading.gif" style="width: 100px;">
            </div>
        </div>
    </div>
</div>
<script>
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
    const renderer = new THREE.WebGLRenderer();


    ( function () {
// o object_name | g group_name
        const _object_pattern = /^[og]\s*(.+)?/;
// mtllib file_reference
        const _material_library_pattern = /^mtllib /;
// usemtl material_name
        const _material_use_pattern = /^usemtl /;
// usemap map_name
        const _map_use_pattern = /^usemap /;
        const _face_vertex_data_separator_pattern = /\s+/;
        const _vA = new THREE.Vector3();
        const _vB = new THREE.Vector3();
        const _vC = new THREE.Vector3();
        const _ab = new THREE.Vector3();
        const _cb = new THREE.Vector3();
        const _color = new THREE.Color();
        function ParserState() {
            const state = {
                objects: [],
                object: {},
                vertices: [],
                normals: [],
                colors: [],
                uvs: [],
                materials: {},
                materialLibraries: [],
                startObject: function ( name, fromDeclaration ) {
// If the current object (initial from reset) is not from a g/o declaration in the parsed
// file. We need to use it for the first parsed g/o to keep things in sync.
                    if ( this.object && this.object.fromDeclaration === false ) {
                        this.object.name = name;
                        this.object.fromDeclaration = fromDeclaration !== false;
                        return;
                    }
                    const previousMaterial = this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined;
                    if ( this.object && typeof this.object._finalize === 'function' ) {
                        this.object._finalize( true );
                    }
                    this.object = {
                        name: name || '',
                        fromDeclaration: fromDeclaration !== false,
                        geometry: {
                            vertices: [],
                            normals: [],
                            colors: [],
                            uvs: [],
                            hasUVIndices: false
                        },
                        materials: [],
                        smooth: true,
                        startMaterial: function ( name, libraries ) {
                            const previous = this._finalize( false );
// New usemtl declaration overwrites an inherited material, except if faces were declared
// after the material, then it must be preserved for proper MultiMaterial continuation.
                            if ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {
                                this.materials.splice( previous.index, 1 );
                            }
                            const material = {
                                index: this.materials.length,
                                name: name || '',
                                mtllib: Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '',
                                smooth: previous !== undefined ? previous.smooth : this.smooth,
                                groupStart: previous !== undefined ? previous.groupEnd : 0,
                                groupEnd: - 1,
                                groupCount: - 1,
                                inherited: false,
                                clone: function ( index ) {
                                    const cloned = {
                                        index: typeof index === 'number' ? index : this.index,
                                        name: this.name,
                                        mtllib: this.mtllib,
                                        smooth: this.smooth,
                                        groupStart: 0,
                                        groupEnd: - 1,
                                        groupCount: - 1,
                                        inherited: false
                                    };
                                    cloned.clone = this.clone.bind( cloned );
                                    return cloned;
                                }
                            };
                            this.materials.push( material );
                            return material;
                        },
                        currentMaterial: function () {
                            if ( this.materials.length > 0 ) {
                                return this.materials[ this.materials.length - 1 ];
                            }
                            return undefined;
                        },
                        _finalize: function ( end ) {
                            const lastMultiMaterial = this.currentMaterial();
                            if ( lastMultiMaterial && lastMultiMaterial.groupEnd === - 1 ) {
                                lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;
                                lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;
                                lastMultiMaterial.inherited = false;
                            }
// Ignore objects tail materials if no face declarations followed them before a new o/g started.
                            if ( end && this.materials.length > 1 ) {
                                for ( let mi = this.materials.length - 1; mi >= 0; mi -- ) {
                                    if ( this.materials[ mi ].groupCount <= 0 ) {
                                        this.materials.splice( mi, 1 );
                                    }
                                }
                            }
// Guarantee at least one empty material, this makes the creation later more straight forward.
                            if ( end && this.materials.length === 0 ) {
                                this.materials.push( {
                                    name: '',
                                    smooth: this.smooth
                                } );
                            }
                            return lastMultiMaterial;
                        }
                    };
// Inherit previous objects material.
// Spec tells us that a declared material must be set to all objects until a new material is declared.
// If a usemtl declaration is encountered while this new object is being parsed, it will
// overwrite the inherited material. Exception being that there was already face declarations
// to the inherited material, then it will be preserved for proper MultiMaterial continuation.
                    if ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function' ) {
                        const declared = previousMaterial.clone( 0 );
                        declared.inherited = true;
                        this.object.materials.push( declared );
                    }
                    this.objects.push( this.object );
                },
                finalize: function () {
                    if ( this.object && typeof this.object._finalize === 'function' ) {
                        this.object._finalize( true );
                    }
                },
                parseVertexIndex: function ( value, len ) {
                    const index = parseInt( value, 10 );
                    return ( index >= 0 ? index - 1 : index + len / 3 ) * 3;
                },
                parseNormalIndex: function ( value, len ) {
                    const index = parseInt( value, 10 );
                    return ( index >= 0 ? index - 1 : index + len / 3 ) * 3;
                },
                parseUVIndex: function ( value, len ) {
                    const index = parseInt( value, 10 );
                    return ( index >= 0 ? index - 1 : index + len / 2 ) * 2;
                },
                addVertex: function ( a, b, c ) {
                    const src = this.vertices;
                    const dst = this.object.geometry.vertices;
                    dst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );
                    dst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );
                    dst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );
                },
                addVertexPoint: function ( a ) {
                    const src = this.vertices;
                    const dst = this.object.geometry.vertices;
                    dst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );
                },
                addVertexLine: function ( a ) {
                    const src = this.vertices;
                    const dst = this.object.geometry.vertices;
                    dst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );
                },
                addNormal: function ( a, b, c ) {
                    const src = this.normals;
                    const dst = this.object.geometry.normals;
                    dst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );
                    dst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );
                    dst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );
                },
                addFaceNormal: function ( a, b, c ) {
                    const src = this.vertices;
                    const dst = this.object.geometry.normals;
                    _vA.fromArray( src, a );
                    _vB.fromArray( src, b );
                    _vC.fromArray( src, c );
                    _cb.subVectors( _vC, _vB );
                    _ab.subVectors( _vA, _vB );
                    _cb.cross( _ab );
                    _cb.normalize();
                    dst.push( _cb.x, _cb.y, _cb.z );
                    dst.push( _cb.x, _cb.y, _cb.z );
                    dst.push( _cb.x, _cb.y, _cb.z );
                },
                addColor: function ( a, b, c ) {
                    const src = this.colors;
                    const dst = this.object.geometry.colors;
                    if ( src[ a ] !== undefined ) dst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );
                    if ( src[ b ] !== undefined ) dst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );
                    if ( src[ c ] !== undefined ) dst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );
                },
                addUV: function ( a, b, c ) {
                    const src = this.uvs;
                    const dst = this.object.geometry.uvs;
                    dst.push( src[ a + 0 ], src[ a + 1 ] );
                    dst.push( src[ b + 0 ], src[ b + 1 ] );
                    dst.push( src[ c + 0 ], src[ c + 1 ] );
                },
                addDefaultUV: function () {
                    const dst = this.object.geometry.uvs;
                    dst.push( 0, 0 );
                    dst.push( 0, 0 );
                    dst.push( 0, 0 );
                },
                addUVLine: function ( a ) {
                    const src = this.uvs;
                    const dst = this.object.geometry.uvs;
                    dst.push( src[ a + 0 ], src[ a + 1 ] );
                },
                addFace: function ( a, b, c, ua, ub, uc, na, nb, nc ) {
                    const vLen = this.vertices.length;
                    let ia = this.parseVertexIndex( a, vLen );
                    let ib = this.parseVertexIndex( b, vLen );
                    let ic = this.parseVertexIndex( c, vLen );
                    this.addVertex( ia, ib, ic );
                    this.addColor( ia, ib, ic );
// normals
                    if ( na !== undefined && na !== '' ) {
                        const nLen = this.normals.length;
                        ia = this.parseNormalIndex( na, nLen );
                        ib = this.parseNormalIndex( nb, nLen );
                        ic = this.parseNormalIndex( nc, nLen );
                        this.addNormal( ia, ib, ic );
                    } else {
                        this.addFaceNormal( ia, ib, ic );
                    }
// uvs
                    if ( ua !== undefined && ua !== '' ) {
                        const uvLen = this.uvs.length;
                        ia = this.parseUVIndex( ua, uvLen );
                        ib = this.parseUVIndex( ub, uvLen );
                        ic = this.parseUVIndex( uc, uvLen );
                        this.addUV( ia, ib, ic );
                        this.object.geometry.hasUVIndices = true;
                    } else {
// add placeholder values (for inconsistent face definitions)
                        this.addDefaultUV();
                    }
                },
                addPointGeometry: function ( vertices ) {
                    this.object.geometry.type = 'Points';
                    const vLen = this.vertices.length;
                    for ( let vi = 0, l = vertices.length; vi < l; vi ++ ) {
                        const index = this.parseVertexIndex( vertices[ vi ], vLen );
                        this.addVertexPoint( index );
                        this.addColor( index );
                    }
                },
                addLineGeometry: function ( vertices, uvs ) {
                    this.object.geometry.type = 'Line';
                    const vLen = this.vertices.length;
                    const uvLen = this.uvs.length;
                    for ( let vi = 0, l = vertices.length; vi < l; vi ++ ) {
                        this.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );
                    }
                    for ( let uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {
                        this.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );
                    }
                }
            };
            state.startObject( '', false );
            return state;
        }
//
        class OBJLoader extends THREE.Loader {
            constructor( manager ) {
                super( manager );
                this.materials = null;
            }
            load( url, onLoad, onProgress, onError ) {
                const scope = this;
                const loader = new THREE.FileLoader( this.manager );
                loader.setPath( this.path );
                loader.setRequestHeader( this.requestHeader );
                loader.setWithCredentials( this.withCredentials );
                loader.load( url, function ( text ) {
                    try {
                        onLoad( scope.parse( text ) );
                    } catch ( e ) {
                        if ( onError ) {
                            onError( e );
                        } else {
                            console.error( e );
                        }
                        scope.manager.itemError( url );
                    }
                }, onProgress, onError );
            }
            setMaterials( materials ) {
                this.materials = materials;
                return this;
            }
            parse( text ) {
                text = atob(text)

                const state = new ParserState();
                if ( text.indexOf( '\r\n' ) !== - 1 ) {
// This is faster than String.split with regex that splits on both
                    text = text.replace( /\r\n/g, '\n' );
                }
                if ( text.indexOf( '\\\n' ) !== - 1 ) {
// join lines separated by a line continuation character (\)
                    text = text.replace( /\\\n/g, '' );
                }
                const lines = text.split( '\n' );
                let result = [];
                for ( let i = 0, l = lines.length; i < l; i ++ ) {
                    const line = lines[ i ].trimStart();
                    if ( line.length === 0 ) continue;
                    const lineFirstChar = line.charAt( 0 );
// @todo invoke passed in handler if any
                    if ( lineFirstChar === '#' ) continue;
                    if ( lineFirstChar === 'v' ) {
                        const data = line.split( _face_vertex_data_separator_pattern );
                        switch ( data[ 0 ] ) {
                            case 'v':
                                state.vertices.push( parseFloat( data[ 1 ] ), parseFloat( data[ 2 ] ), parseFloat( data[ 3 ] ) );
                                if ( data.length >= 7 ) {
                                    _color.setRGB( parseFloat( data[ 4 ] ), parseFloat( data[ 5 ] ), parseFloat( data[ 6 ] ) ).convertSRGBToLinear();
                                    state.colors.push( _color.r, _color.g, _color.b );
                                } else {
// if no colors are defined, add placeholders so color and vertex indices match
                                    state.colors.push( undefined, undefined, undefined );
                                }
                                break;
                            case 'vn':
                                state.normals.push( parseFloat( data[ 1 ] ), parseFloat( data[ 2 ] ), parseFloat( data[ 3 ] ) );
                                break;
                            case 'vt':
                                state.uvs.push( parseFloat( data[ 1 ] ), parseFloat( data[ 2 ] ) );
                                break;
                        }
                    } else if ( lineFirstChar === 'f' ) {
                        const lineData = line.slice( 1 ).trim();
                        const vertexData = lineData.split( _face_vertex_data_separator_pattern );
                        const faceVertices = [];
// Parse the face vertex data into an easy to work with format
                        for ( let j = 0, jl = vertexData.length; j < jl; j ++ ) {
                            const vertex = vertexData[ j ];
                            if ( vertex.length > 0 ) {
                                const vertexParts = vertex.split( '/' );
                                faceVertices.push( vertexParts );
                            }
                        }
// Draw an edge between the first vertex and all subsequent vertices to form an n-gon
                        const v1 = faceVertices[ 0 ];
                        for ( let j = 1, jl = faceVertices.length - 1; j < jl; j ++ ) {
                            const v2 = faceVertices[ j ];
                            const v3 = faceVertices[ j + 1 ];
                            state.addFace( v1[ 0 ], v2[ 0 ], v3[ 0 ], v1[ 1 ], v2[ 1 ], v3[ 1 ], v1[ 2 ], v2[ 2 ], v3[ 2 ] );
                        }
                    } else if ( lineFirstChar === 'l' ) {
                        const lineParts = line.substring( 1 ).trim().split( ' ' );
                        let lineVertices = [];
                        const lineUVs = [];
                        if ( line.indexOf( '/' ) === - 1 ) {
                            lineVertices = lineParts;
                        } else {
                            for ( let li = 0, llen = lineParts.length; li < llen; li ++ ) {
                                const parts = lineParts[ li ].split( '/' );
                                if ( parts[ 0 ] !== '' ) lineVertices.push( parts[ 0 ] );
                                if ( parts[ 1 ] !== '' ) lineUVs.push( parts[ 1 ] );
                            }
                        }
                        state.addLineGeometry( lineVertices, lineUVs );
                    } else if ( lineFirstChar === 'p' ) {
                        const lineData = line.slice( 1 ).trim();
                        const pointData = lineData.split( ' ' );
                        state.addPointGeometry( pointData );
                    } else if ( ( result = _object_pattern.exec( line ) ) !== null ) {
// o object_name
// or
// g group_name
// WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869
// let name = result[ 0 ].slice( 1 ).trim();
                        const name = ( ' ' + result[ 0 ].slice( 1 ).trim() ).slice( 1 );
                        state.startObject( name );
                    } else if ( _material_use_pattern.test( line ) ) {
// material
                        state.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );
                    } else if ( _material_library_pattern.test( line ) ) {
// mtl file
                        state.materialLibraries.push( line.substring( 7 ).trim() );
                    } else if ( _map_use_pattern.test( line ) ) {
// the line is parsed but ignored since the loader assumes textures are defined MTL files
// (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)
                        console.warn( 'THREE.OBJLoader: Rendering identifier "usemap" not supported. Textures must be defined in MTL files.' );
                    } else if ( lineFirstChar === 's' ) {
                        result = line.split( ' ' );
// smooth shading
// @todo Handle files that have varying smooth values for a set of faces inside one geometry,
// but does not define a usemtl for each face set.
// This should be detected and a dummy material created (later MultiMaterial and geometry groups).
// This requires some care to not create extra material on each smooth value for "normal" obj files.
// where explicit usemtl defines geometry groups.
// Example asset: examples/models/obj/cerberus/Cerberus.obj
                        /*
                        * http://paulbourke.net/dataformats/obj/
                        *
                        * From chapter "Grouping" Syntax explanation "s group_number":
                        * "group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.
                        * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form
                        * surfaces, smoothing groups are either turned on or off; there is no difference between values greater
                        * than 0."
                        */
                        if ( result.length > 1 ) {
                            const value = result[ 1 ].trim().toLowerCase();
                            state.object.smooth = value !== '0' && value !== 'off';
                        } else {
// ZBrush can produce "s" lines #11707
                            state.object.smooth = true;
                        }
                        const material = state.object.currentMaterial();
                        if ( material ) material.smooth = state.object.smooth;
                    } else {
// Handle null terminated files without exception
                        if ( line === '\0' ) continue;
                        console.warn( 'THREE.OBJLoader: Unexpected line: "' + line + '"' );
                    }
                }
                state.finalize();
                const container = new THREE.Group();
                container.materialLibraries = [].concat( state.materialLibraries );
                const hasPrimitives = ! ( state.objects.length === 1 && state.objects[ 0 ].geometry.vertices.length === 0 );
                if ( hasPrimitives === true ) {
                    for ( let i = 0, l = state.objects.length; i < l; i ++ ) {
                        const object = state.objects[ i ];
                        const geometry = object.geometry;
                        const materials = object.materials;
                        const isLine = geometry.type === 'Line';
                        const isPoints = geometry.type === 'Points';
                        let hasVertexColors = false;
// Skip o/g line declarations that did not follow with any faces
                        if ( geometry.vertices.length === 0 ) continue;
                        const buffergeometry = new THREE.BufferGeometry();
                        buffergeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( geometry.vertices, 3 ) );
                        if ( geometry.normals.length > 0 ) {
                            buffergeometry.setAttribute( 'normal', new THREE.Float32BufferAttribute( geometry.normals, 3 ) );
                        }
                        if ( geometry.colors.length > 0 ) {
                            hasVertexColors = true;
                            buffergeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( geometry.colors, 3 ) );
                        }
                        if ( geometry.hasUVIndices === true ) {
                            buffergeometry.setAttribute( 'uv', new THREE.Float32BufferAttribute( geometry.uvs, 2 ) );
                        }
// Create materials
                        const createdMaterials = [];
                        for ( let mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {
                            const sourceMaterial = materials[ mi ];
                            const materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;
                            let material = state.materials[ materialHash ];
                            if ( this.materials !== null ) {
                                material = this.materials.create( sourceMaterial.name );
// mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.
                                if ( isLine && material && ! ( material instanceof THREE.LineBasicMaterial ) ) {
                                    const materialLine = new THREE.LineBasicMaterial();
                                    THREE.Material.prototype.copy.call( materialLine, material );
                                    materialLine.color.copy( material.color );
                                    material = materialLine;
                                } else if ( isPoints && material && ! ( material instanceof THREE.PointsMaterial ) ) {
                                    const materialPoints = new THREE.PointsMaterial( {
                                        size: 10,
                                        sizeAttenuation: false
                                    } );
                                    THREE.Material.prototype.copy.call( materialPoints, material );
                                    materialPoints.color.copy( material.color );
                                    materialPoints.map = material.map;
                                    material = materialPoints;
                                }
                            }
                            if ( material === undefined ) {
                                if ( isLine ) {
                                    material = new THREE.LineBasicMaterial();
                                } else if ( isPoints ) {
                                    material = new THREE.PointsMaterial( {
                                        size: 1,
                                        sizeAttenuation: false
                                    } );
                                } else {
                                    material = new THREE.MeshPhongMaterial();
                                }
                                material.name = sourceMaterial.name;
                                material.flatShading = sourceMaterial.smooth ? false : true;
                                material.vertexColors = hasVertexColors;
                                state.materials[ materialHash ] = material;
                            }
                            createdMaterials.push( material );
                        }
// Create mesh
                        let mesh;
                        if ( createdMaterials.length > 1 ) {
                            for ( let mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {
                                const sourceMaterial = materials[ mi ];
                                buffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );
                            }
                            if ( isLine ) {
                                mesh = new THREE.LineSegments( buffergeometry, createdMaterials );
                            } else if ( isPoints ) {
                                mesh = new THREE.Points( buffergeometry, createdMaterials );
                            } else {
                                mesh = new THREE.Mesh( buffergeometry, createdMaterials );
                            }
                        } else {
                            if ( isLine ) {
                                mesh = new THREE.LineSegments( buffergeometry, createdMaterials[ 0 ] );
                            } else if ( isPoints ) {
                                mesh = new THREE.Points( buffergeometry, createdMaterials[ 0 ] );
                            } else {
                                mesh = new THREE.Mesh( buffergeometry, createdMaterials[ 0 ] );
                            }
                        }
                        mesh.name = object.name;
                        container.add( mesh );
                    }
                } else {
// if there is only the default parser state object with no geometry data, interpret data as point cloud
                    if ( state.vertices.length > 0 ) {
                        const material = new THREE.PointsMaterial( {
                            size: 1,
                            sizeAttenuation: false
                        } );
                        const buffergeometry = new THREE.BufferGeometry();
                        buffergeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( state.vertices, 3 ) );
                        if ( state.colors.length > 0 && state.colors[ 0 ] !== undefined ) {
                            buffergeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( state.colors, 3 ) );
                            material.vertexColors = true;
                        }
                        const points = new THREE.Points( buffergeometry, material );
                        container.add( points );
                    }
                }
                return container;
            }
        }
        THREE.OBJLoader = OBJLoader;
    } )();

    ( function () {

        /**
         * Loads a Wavefront .mtl file specifying materials
         */

        class MTLLoader extends THREE.Loader {

            constructor( manager ) {

                super( manager );

            }
            /**
             * Loads and parses a MTL asset from a URL.
             *
             * @param {String} url - URL to the MTL file.
             * @param {Function} [onLoad] - Callback invoked with the loaded object.
             * @param {Function} [onProgress] - Callback for download progress.
             * @param {Function} [onError] - Callback for download errors.
             *
             * @see setPath setResourcePath
             *
             * @note In order for relative texture references to resolve correctly
             * you must call setResourcePath() explicitly prior to load.
             */


            load( url, onLoad, onProgress, onError ) {

                const scope = this;
                const path = this.path === '' ? THREE.LoaderUtils.extractUrlBase( url ) : this.path;
                const loader = new THREE.FileLoader( this.manager );
                loader.setPath( this.path );
                loader.setRequestHeader( this.requestHeader );
                loader.setWithCredentials( this.withCredentials );
                loader.load( url, function ( text ) {

                    try {

                        onLoad( scope.parse( text, path ) );

                    } catch ( e ) {

                        if ( onError ) {

                            onError( e );

                        } else {

                            console.error( e );

                        }

                        scope.manager.itemError( url );

                    }

                }, onProgress, onError );

            }

            setMaterialOptions( value ) {

                this.materialOptions = value;
                return this;

            }
            /**
             * Parses a MTL file.
             *
             * @param {String} text - Content of MTL file
             * @return {MaterialCreator}
             *
             * @see setPath setResourcePath
             *
             * @note In order for relative texture references to resolve correctly
             * you must call setResourcePath() explicitly prior to parse.
             */


            parse( text, path ) {
                console.log(text)
                console.log(atob(text))
                console.log(path)
                text = atob(text)

                const lines = text.split( '\n' );
                let info = {};
                const delimiter_pattern = /\s+/;
                const materialsInfo = {};

                for ( let i = 0; i < lines.length; i ++ ) {

                    let line = lines[ i ];
                    line = line.trim();

                    if ( line.length === 0 || line.charAt( 0 ) === '#' ) {

                        // Blank line or comment ignore
                        continue;

                    }

                    const pos = line.indexOf( ' ' );
                    let key = pos >= 0 ? line.substring( 0, pos ) : line;
                    key = key.toLowerCase();
                    let value = pos >= 0 ? line.substring( pos + 1 ) : '';
                    value = value.trim();

                    if ( key === 'newmtl' ) {

                        // New material
                        info = {
                            name: value
                        };
                        materialsInfo[ value ] = info;

                    } else {

                        if ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {

                            const ss = value.split( delimiter_pattern, 3 );
                            info[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];

                        } else {

                            console.log(value)
                            info[ key ] = value;

                        }

                    }

                }

                const materialCreator = new MaterialCreator( this.resourcePath || path, this.materialOptions );
                materialCreator.setCrossOrigin( this.crossOrigin );
                materialCreator.setManager( this.manager );
                materialCreator.setMaterials( materialsInfo );
                return materialCreator;

            }

        }
        /**
         * Create a new MTLLoader.MaterialCreator
         * @param baseUrl - Url relative to which textures are loaded
         * @param options - Set of options on how to construct the materials
         *                  side: Which side to apply the material
         *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide
         *                  wrap: What type of wrapping to apply for textures
         *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping
         *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255
         *                                Default: false, assumed to be already normalized
         *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's
         *                                  Default: false
         * @constructor
         */


        class MaterialCreator {

            constructor( baseUrl = '', options = {} ) {

                this.baseUrl = baseUrl;
                this.options = options;
                this.materialsInfo = {};
                this.materials = {};
                this.materialsArray = [];
                this.nameLookup = {};
                this.crossOrigin = 'anonymous';
                this.side = this.options.side !== undefined ? this.options.side : THREE.FrontSide;
                this.wrap = this.options.wrap !== undefined ? this.options.wrap : THREE.RepeatWrapping;

            }

            setCrossOrigin( value ) {

                this.crossOrigin = value;
                return this;

            }

            setManager( value ) {

                this.manager = value;

            }

            setMaterials( materialsInfo ) {

                this.materialsInfo = this.convert( materialsInfo );
                this.materials = {};
                this.materialsArray = [];
                this.nameLookup = {};

            }

            convert( materialsInfo ) {

                if ( ! this.options ) return materialsInfo;
                const converted = {};

                for ( const mn in materialsInfo ) {

                    // Convert materials info into normalized form based on options
                    const mat = materialsInfo[ mn ];
                    const covmat = {};
                    converted[ mn ] = covmat;

                    for ( const prop in mat ) {

                        let save = true;
                        let value = mat[ prop ];
                        const lprop = prop.toLowerCase();

                        switch ( lprop ) {

                            case 'kd':
                            case 'ka':
                            case 'ks':
                                // Diffuse color (color under white light) using RGB values
                                if ( this.options && this.options.normalizeRGB ) {

                                    value = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];

                                }

                                if ( this.options && this.options.ignoreZeroRGBs ) {

                                    if ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {

                                        // ignore
                                        save = false;

                                    }

                                }

                                break;

                            default:
                                break;

                        }

                        if ( save ) {

                            covmat[ lprop ] = value;

                        }

                    }

                }

                return converted;

            }

            preload() {

                for ( const mn in this.materialsInfo ) {

                    this.create( mn );

                }

            }

            getIndex( materialName ) {

                return this.nameLookup[ materialName ];

            }

            getAsArray() {

                let index = 0;

                for ( const mn in this.materialsInfo ) {

                    this.materialsArray[ index ] = this.create( mn );
                    this.nameLookup[ mn ] = index;
                    index ++;

                }

                return this.materialsArray;

            }

            create( materialName ) {

                if ( this.materials[ materialName ] === undefined ) {

                    this.createMaterial_( materialName );

                }

                return this.materials[ materialName ];

            }

            createMaterial_( materialName ) {

                // Create material
                const scope = this;
                const mat = this.materialsInfo[ materialName ];
                const params = {
                    name: materialName,
                    side: this.side
                };

                function resolveURL( baseUrl, url ) {

                    // get base64

                    if ( typeof url !== 'string' || url === '' ) return ''; // Absolute URL

                    if ( /^https?:\/\//i.test( url ) ) return url;
                    return baseUrl + url;

                }

                function setMapForType( mapType, value ) {

                    if ( params[ mapType ] ) return; // Keep the first encountered texture

                    const texParams = scope.getTextureParams( value, params );
                    console.log(value)

                    const map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );
                    map.repeat.copy( texParams.scale );
                    map.offset.copy( texParams.offset );
                    map.wrapS = scope.wrap;
                    map.wrapT = scope.wrap;
                    params[ mapType ] = map;

                }

                for ( const prop in mat ) {

                    const value = mat[ prop ];
                    let n;
                    if ( value === '' ) continue;

                    switch ( prop.toLowerCase() ) {

                        // Ns is material specular exponent
                        case 'kd':
                            // Diffuse color (color under white light) using RGB values
                            params.color = new THREE.Color().fromArray( value );
                            break;

                        case 'ks':
                            // Specular color (color when light is reflected from shiny surface) using RGB values
                            params.specular = new THREE.Color().fromArray( value );
                            break;

                        case 'ke':
                            // Emissive using RGB values
                            params.emissive = new THREE.Color().fromArray( value );
                            break;

                        case 'map_kd':
                            // Diffuse texture map
                            setMapForType( 'map', value );
                            break;

                        case 'map_ks':
                            // Specular map
                            setMapForType( 'specularMap', value );
                            break;

                        case 'map_ke':
                            // Emissive map
                            setMapForType( 'emissiveMap', value );
                            break;

                        case 'norm':
                            setMapForType( 'normalMap', value );
                            break;

                        case 'map_bump':
                        case 'bump':
                            // Bump texture map
                            setMapForType( 'bumpMap', value );
                            break;

                        case 'map_d':
                            // Alpha map
                            setMapForType( 'alphaMap', value );
                            params.transparent = true;
                            break;


                        case 'ns':
                            // The specular exponent (defines the focus of the specular highlight)
                            // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.
                            params.shininess = parseFloat( value );
                            break;

                        case 'd':
                            n = parseFloat( value );

                            if ( n < 1 ) {

                                params.opacity = n;
                                params.transparent = true;

                            }

                            break;

                        case 'tr':
                            n = parseFloat( value );
                            if ( this.options && this.options.invertTrProperty ) n = 1 - n;

                            if ( n > 0 ) {

                                params.opacity = 1 - n;
                                params.transparent = true;

                            }

                            break;

                        default:
                            break;

                    }

                }

                this.materials[ materialName ] = new THREE.MeshPhongMaterial( params );
                return this.materials[ materialName ];

            }

            getTextureParams( value, matParams ) {

                const texParams = {
                    scale: new THREE.Vector2( 1, 1 ),
                    offset: new THREE.Vector2( 0, 0 )
                };
                const items = value.split( /\s+/ );
                let pos;
                pos = items.indexOf( '-bm' );

                if ( pos >= 0 ) {

                    matParams.bumpScale = parseFloat( items[ pos + 1 ] );
                    items.splice( pos, 2 );

                }

                pos = items.indexOf( '-s' );

                if ( pos >= 0 ) {

                    texParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );
                    items.splice( pos, 4 ); // we expect 3 parameters here!

                }

                pos = items.indexOf( '-o' );

                if ( pos >= 0 ) {

                    texParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );
                    items.splice( pos, 4 ); // we expect 3 parameters here!

                }

                texParams.url = items.join( ' ' ).trim();
                return texParams;

            }

            loadTexture( url, mapping, onLoad, onProgress, onError ) {

                const manager = this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;
                let loader = manager.getHandler( url );

                if ( loader === null ) {

                    loader = new THREE.TextureLoader( manager );

                }

                if ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );
                const texture = loader.load( url, onLoad, onProgress, onError );
                if ( mapping !== undefined ) texture.mapping = mapping;
                return texture;

            }

        }

        THREE.MTLLoader = MTLLoader;

    } )();

    ( function () {

        // This set of controls performs orbiting, dollying (zooming), and panning.
        // Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
        //
        //    Orbit - left mouse / touch: one-finger move
        //    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
        //    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move

        const _changeEvent = {
            type: 'change'
        };
        const _startEvent = {
            type: 'start'
        };
        const _endEvent = {
            type: 'end'
        };
        class OrbitControls extends THREE.EventDispatcher {

            constructor( object, domElement ) {

                super();
                this.object = object;
                this.domElement = domElement;
                this.domElement.style.touchAction = 'none'; // disable touch scroll

                // Set to false to disable this control
                this.enabled = true;

                // "target" sets the location of focus, where the object orbits around
                this.target = new THREE.Vector3();

                // How far you can dolly in and out ( PerspectiveCamera only )
                this.minDistance = 0;
                this.maxDistance = Infinity;

                // How far you can zoom in and out ( OrthographicCamera only )
                this.minZoom = 0;
                this.maxZoom = Infinity;

                // How far you can orbit vertically, upper and lower limits.
                // Range is 0 to Math.PI radians.
                this.minPolarAngle = 0; // radians
                this.maxPolarAngle = Math.PI; // radians

                // How far you can orbit horizontally, upper and lower limits.
                // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )
                this.minAzimuthAngle = - Infinity; // radians
                this.maxAzimuthAngle = Infinity; // radians

                // Set to true to enable damping (inertia)
                // If damping is enabled, you must call controls.update() in your animation loop
                this.enableDamping = false;
                this.dampingFactor = 0.05;

                // This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
                // Set to false to disable zooming
                this.enableZoom = true;
                this.zoomSpeed = 1.0;

                // Set to false to disable rotating
                this.enableRotate = true;
                this.rotateSpeed = 1.0;

                // Set to false to disable panning
                this.enablePan = true;
                this.panSpeed = 1.0;
                this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up
                this.keyPanSpeed = 7.0; // pixels moved per arrow key push

                // Set to true to automatically rotate around the target
                // If auto-rotate is enabled, you must call controls.update() in your animation loop
                this.autoRotate = false;
                this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60

                // The four arrow keys
                this.keys = {
                    LEFT: 'ArrowLeft',
                    UP: 'ArrowUp',
                    RIGHT: 'ArrowRight',
                    BOTTOM: 'ArrowDown'
                };

                // Mouse buttons
                this.mouseButtons = {
                    LEFT: THREE.MOUSE.ROTATE,
                    MIDDLE: THREE.MOUSE.DOLLY,
                    RIGHT: THREE.MOUSE.PAN
                };

                // Touch fingers
                this.touches = {
                    ONE: THREE.TOUCH.ROTATE,
                    TWO: THREE.TOUCH.DOLLY_PAN
                };

                // for reset
                this.target0 = this.target.clone();
                this.position0 = this.object.position.clone();
                this.zoom0 = this.object.zoom;

                // the target DOM element for key events
                this._domElementKeyEvents = null;

                //
                // public methods
                //

                this.getPolarAngle = function () {

                    return spherical.phi;

                };

                this.getAzimuthalAngle = function () {

                    return spherical.theta;

                };

                this.getDistance = function () {

                    return this.object.position.distanceTo( this.target );

                };

                this.listenToKeyEvents = function ( domElement ) {

                    domElement.addEventListener( 'keydown', onKeyDown );
                    this._domElementKeyEvents = domElement;

                };

                this.saveState = function () {

                    scope.target0.copy( scope.target );
                    scope.position0.copy( scope.object.position );
                    scope.zoom0 = scope.object.zoom;

                };

                this.reset = function () {

                    scope.target.copy( scope.target0 );
                    scope.object.position.copy( scope.position0 );
                    scope.object.zoom = scope.zoom0;
                    scope.object.updateProjectionMatrix();
                    scope.dispatchEvent( _changeEvent );
                    scope.update();
                    state = STATE.NONE;

                };

                // this method is exposed, but perhaps it would be better if we can make it private...
                this.update = function () {

                    const offset = new THREE.Vector3();

                    // so camera.up is the orbit axis
                    const quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );
                    const quatInverse = quat.clone().invert();
                    const lastPosition = new THREE.Vector3();
                    const lastQuaternion = new THREE.Quaternion();
                    const twoPI = 2 * Math.PI;
                    return function update() {

                        const position = scope.object.position;
                        offset.copy( position ).sub( scope.target );

                        // rotate offset to "y-axis-is-up" space
                        offset.applyQuaternion( quat );

                        // angle from z-axis around y-axis
                        spherical.setFromVector3( offset );
                        if ( scope.autoRotate && state === STATE.NONE ) {

                            rotateLeft( getAutoRotationAngle() );

                        }

                        if ( scope.enableDamping ) {

                            spherical.theta += sphericalDelta.theta * scope.dampingFactor;
                            spherical.phi += sphericalDelta.phi * scope.dampingFactor;

                        } else {

                            spherical.theta += sphericalDelta.theta;
                            spherical.phi += sphericalDelta.phi;

                        }

                        // restrict theta to be between desired limits

                        let min = scope.minAzimuthAngle;
                        let max = scope.maxAzimuthAngle;
                        if ( isFinite( min ) && isFinite( max ) ) {

                            if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;
                            if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;
                            if ( min <= max ) {

                                spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );

                            } else {

                                spherical.theta = spherical.theta > ( min + max ) / 2 ? Math.max( min, spherical.theta ) : Math.min( max, spherical.theta );

                            }

                        }

                        // restrict phi to be between desired limits
                        spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );
                        spherical.makeSafe();
                        spherical.radius *= scale;

                        // restrict radius to be between desired limits
                        spherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );

                        // move target to panned location

                        if ( scope.enableDamping === true ) {

                            scope.target.addScaledVector( panOffset, scope.dampingFactor );

                        } else {

                            scope.target.add( panOffset );

                        }

                        offset.setFromSpherical( spherical );

                        // rotate offset back to "camera-up-vector-is-up" space
                        offset.applyQuaternion( quatInverse );
                        position.copy( scope.target ).add( offset );
                        scope.object.lookAt( scope.target );
                        if ( scope.enableDamping === true ) {

                            sphericalDelta.theta *= 1 - scope.dampingFactor;
                            sphericalDelta.phi *= 1 - scope.dampingFactor;
                            panOffset.multiplyScalar( 1 - scope.dampingFactor );

                        } else {

                            sphericalDelta.set( 0, 0, 0 );
                            panOffset.set( 0, 0, 0 );

                        }

                        scale = 1;

                        // update condition is:
                        // min(camera displacement, camera rotation in radians)^2 > EPS
                        // using small-angle approximation cos(x/2) = 1 - x^2 / 8

                        if ( zoomChanged || lastPosition.distanceToSquared( scope.object.position ) > EPS || 8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {

                            scope.dispatchEvent( _changeEvent );
                            lastPosition.copy( scope.object.position );
                            lastQuaternion.copy( scope.object.quaternion );
                            zoomChanged = false;
                            return true;

                        }

                        return false;

                    };

                }();
                this.dispose = function () {

                    scope.domElement.removeEventListener( 'contextmenu', onContextMenu );
                    scope.domElement.removeEventListener( 'pointerdown', onPointerDown );
                    scope.domElement.removeEventListener( 'pointercancel', onPointerCancel );
                    scope.domElement.removeEventListener( 'wheel', onMouseWheel );
                    scope.domElement.removeEventListener( 'pointermove', onPointerMove );
                    scope.domElement.removeEventListener( 'pointerup', onPointerUp );
                    if ( scope._domElementKeyEvents !== null ) {

                        scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );

                    }

                    //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

                };

                //
                // internals
                //

                const scope = this;
                const STATE = {
                    NONE: - 1,
                    ROTATE: 0,
                    DOLLY: 1,
                    PAN: 2,
                    TOUCH_ROTATE: 3,
                    TOUCH_PAN: 4,
                    TOUCH_DOLLY_PAN: 5,
                    TOUCH_DOLLY_ROTATE: 6
                };
                let state = STATE.NONE;
                const EPS = 0.000001;

                // current position in spherical coordinates
                const spherical = new THREE.Spherical();
                const sphericalDelta = new THREE.Spherical();
                let scale = 1;
                const panOffset = new THREE.Vector3();
                let zoomChanged = false;
                const rotateStart = new THREE.Vector2();
                const rotateEnd = new THREE.Vector2();
                const rotateDelta = new THREE.Vector2();
                const panStart = new THREE.Vector2();
                const panEnd = new THREE.Vector2();
                const panDelta = new THREE.Vector2();
                const dollyStart = new THREE.Vector2();
                const dollyEnd = new THREE.Vector2();
                const dollyDelta = new THREE.Vector2();
                const pointers = [];
                const pointerPositions = {};
                function getAutoRotationAngle() {

                    return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

                }

                function getZoomScale() {

                    return Math.pow( 0.95, scope.zoomSpeed );

                }

                function rotateLeft( angle ) {

                    sphericalDelta.theta -= angle;

                }

                function rotateUp( angle ) {

                    sphericalDelta.phi -= angle;

                }

                const panLeft = function () {

                    const v = new THREE.Vector3();
                    return function panLeft( distance, objectMatrix ) {

                        v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
                        v.multiplyScalar( - distance );
                        panOffset.add( v );

                    };

                }();
                const panUp = function () {

                    const v = new THREE.Vector3();
                    return function panUp( distance, objectMatrix ) {

                        if ( scope.screenSpacePanning === true ) {

                            v.setFromMatrixColumn( objectMatrix, 1 );

                        } else {

                            v.setFromMatrixColumn( objectMatrix, 0 );
                            v.crossVectors( scope.object.up, v );

                        }

                        v.multiplyScalar( distance );
                        panOffset.add( v );

                    };

                }();

                // deltaX and deltaY are in pixels; right and down are positive
                const pan = function () {

                    const offset = new THREE.Vector3();
                    return function pan( deltaX, deltaY ) {

                        const element = scope.domElement;
                        if ( scope.object.isPerspectiveCamera ) {

                            // perspective
                            const position = scope.object.position;
                            offset.copy( position ).sub( scope.target );
                            let targetDistance = offset.length();

                            // half of the fov is center to top of screen
                            targetDistance *= Math.tan( scope.object.fov / 2 * Math.PI / 180.0 );

                            // we use only clientHeight here so aspect ratio does not distort speed
                            panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
                            panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );

                        } else if ( scope.object.isOrthographicCamera ) {

                            // orthographic
                            panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
                            panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );

                        } else {

                            // camera neither orthographic nor perspective
                            console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
                            scope.enablePan = false;

                        }

                    };

                }();
                function dollyOut( dollyScale ) {

                    if ( scope.object.isPerspectiveCamera ) {

                        scale /= dollyScale;

                    } else if ( scope.object.isOrthographicCamera ) {

                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );
                        scope.object.updateProjectionMatrix();
                        zoomChanged = true;

                    } else {

                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
                        scope.enableZoom = false;

                    }

                }

                function dollyIn( dollyScale ) {

                    if ( scope.object.isPerspectiveCamera ) {

                        scale *= dollyScale;

                    } else if ( scope.object.isOrthographicCamera ) {

                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );
                        scope.object.updateProjectionMatrix();
                        zoomChanged = true;

                    } else {

                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
                        scope.enableZoom = false;

                    }

                }

                //
                // event callbacks - update the object state
                //

                function handleMouseDownRotate( event ) {

                    rotateStart.set( event.clientX, event.clientY );

                }

                function handleMouseDownDolly( event ) {

                    dollyStart.set( event.clientX, event.clientY );

                }

                function handleMouseDownPan( event ) {

                    panStart.set( event.clientX, event.clientY );

                }

                function handleMouseMoveRotate( event ) {

                    rotateEnd.set( event.clientX, event.clientY );
                    rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );
                    const element = scope.domElement;
                    rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height

                    rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );
                    rotateStart.copy( rotateEnd );
                    scope.update();

                }

                function handleMouseMoveDolly( event ) {

                    dollyEnd.set( event.clientX, event.clientY );
                    dollyDelta.subVectors( dollyEnd, dollyStart );
                    if ( dollyDelta.y > 0 ) {

                        dollyOut( getZoomScale() );

                    } else if ( dollyDelta.y < 0 ) {

                        dollyIn( getZoomScale() );

                    }

                    dollyStart.copy( dollyEnd );
                    scope.update();

                }

                function handleMouseMovePan( event ) {

                    panEnd.set( event.clientX, event.clientY );
                    panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );
                    pan( panDelta.x, panDelta.y );
                    panStart.copy( panEnd );
                    scope.update();

                }

                function handleMouseWheel( event ) {

                    if ( event.deltaY < 0 ) {

                        dollyIn( getZoomScale() );

                    } else if ( event.deltaY > 0 ) {

                        dollyOut( getZoomScale() );

                    }

                    scope.update();

                }

                function handleKeyDown( event ) {

                    let needsUpdate = false;
                    switch ( event.code ) {

                        case scope.keys.UP:
                            if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

                                rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );

                            } else {

                                pan( 0, scope.keyPanSpeed );

                            }

                            needsUpdate = true;
                            break;
                        case scope.keys.BOTTOM:
                            if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

                                rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );

                            } else {

                                pan( 0, - scope.keyPanSpeed );

                            }

                            needsUpdate = true;
                            break;
                        case scope.keys.LEFT:
                            if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

                                rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );

                            } else {

                                pan( scope.keyPanSpeed, 0 );

                            }

                            needsUpdate = true;
                            break;
                        case scope.keys.RIGHT:
                            if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

                                rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );

                            } else {

                                pan( - scope.keyPanSpeed, 0 );

                            }

                            needsUpdate = true;
                            break;

                    }

                    if ( needsUpdate ) {

                        // prevent the browser from scrolling on cursor keys
                        event.preventDefault();
                        scope.update();

                    }

                }

                function handleTouchStartRotate() {

                    if ( pointers.length === 1 ) {

                        rotateStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );

                    } else {

                        const x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );
                        const y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );
                        rotateStart.set( x, y );

                    }

                }

                function handleTouchStartPan() {

                    if ( pointers.length === 1 ) {

                        panStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );

                    } else {

                        const x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );
                        const y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );
                        panStart.set( x, y );

                    }

                }

                function handleTouchStartDolly() {

                    const dx = pointers[ 0 ].pageX - pointers[ 1 ].pageX;
                    const dy = pointers[ 0 ].pageY - pointers[ 1 ].pageY;
                    const distance = Math.sqrt( dx * dx + dy * dy );
                    dollyStart.set( 0, distance );

                }

                function handleTouchStartDollyPan() {

                    if ( scope.enableZoom ) handleTouchStartDolly();
                    if ( scope.enablePan ) handleTouchStartPan();

                }

                function handleTouchStartDollyRotate() {

                    if ( scope.enableZoom ) handleTouchStartDolly();
                    if ( scope.enableRotate ) handleTouchStartRotate();

                }

                function handleTouchMoveRotate( event ) {

                    if ( pointers.length == 1 ) {

                        rotateEnd.set( event.pageX, event.pageY );

                    } else {

                        const position = getSecondPointerPosition( event );
                        const x = 0.5 * ( event.pageX + position.x );
                        const y = 0.5 * ( event.pageY + position.y );
                        rotateEnd.set( x, y );

                    }

                    rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );
                    const element = scope.domElement;
                    rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height

                    rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );
                    rotateStart.copy( rotateEnd );

                }

                function handleTouchMovePan( event ) {

                    if ( pointers.length === 1 ) {

                        panEnd.set( event.pageX, event.pageY );

                    } else {

                        const position = getSecondPointerPosition( event );
                        const x = 0.5 * ( event.pageX + position.x );
                        const y = 0.5 * ( event.pageY + position.y );
                        panEnd.set( x, y );

                    }

                    panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );
                    pan( panDelta.x, panDelta.y );
                    panStart.copy( panEnd );

                }

                function handleTouchMoveDolly( event ) {

                    const position = getSecondPointerPosition( event );
                    const dx = event.pageX - position.x;
                    const dy = event.pageY - position.y;
                    const distance = Math.sqrt( dx * dx + dy * dy );
                    dollyEnd.set( 0, distance );
                    dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );
                    dollyOut( dollyDelta.y );
                    dollyStart.copy( dollyEnd );

                }

                function handleTouchMoveDollyPan( event ) {

                    if ( scope.enableZoom ) handleTouchMoveDolly( event );
                    if ( scope.enablePan ) handleTouchMovePan( event );

                }

                function handleTouchMoveDollyRotate( event ) {

                    if ( scope.enableZoom ) handleTouchMoveDolly( event );
                    if ( scope.enableRotate ) handleTouchMoveRotate( event );

                }

                //
                // event handlers - FSM: listen for events and reset state
                //

                function onPointerDown( event ) {

                    if ( scope.enabled === false ) return;
                    if ( pointers.length === 0 ) {

                        scope.domElement.setPointerCapture( event.pointerId );
                        scope.domElement.addEventListener( 'pointermove', onPointerMove );
                        scope.domElement.addEventListener( 'pointerup', onPointerUp );

                    }

                    //

                    addPointer( event );
                    if ( event.pointerType === 'touch' ) {

                        onTouchStart( event );

                    } else {

                        onMouseDown( event );

                    }

                }

                function onPointerMove( event ) {

                    if ( scope.enabled === false ) return;
                    if ( event.pointerType === 'touch' ) {

                        onTouchMove( event );

                    } else {

                        onMouseMove( event );

                    }

                }

                function onPointerUp( event ) {

                    removePointer( event );
                    if ( pointers.length === 0 ) {

                        scope.domElement.releasePointerCapture( event.pointerId );
                        scope.domElement.removeEventListener( 'pointermove', onPointerMove );
                        scope.domElement.removeEventListener( 'pointerup', onPointerUp );

                    }

                    scope.dispatchEvent( _endEvent );
                    state = STATE.NONE;

                }

                function onPointerCancel( event ) {

                    removePointer( event );

                }

                function onMouseDown( event ) {

                    let mouseAction;
                    switch ( event.button ) {

                        case 0:
                            mouseAction = scope.mouseButtons.LEFT;
                            break;
                        case 1:
                            mouseAction = scope.mouseButtons.MIDDLE;
                            break;
                        case 2:
                            mouseAction = scope.mouseButtons.RIGHT;
                            break;
                        default:
                            mouseAction = - 1;

                    }

                    switch ( mouseAction ) {

                        case THREE.MOUSE.DOLLY:
                            if ( scope.enableZoom === false ) return;
                            handleMouseDownDolly( event );
                            state = STATE.DOLLY;
                            break;
                        case THREE.MOUSE.ROTATE:
                            if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

                                if ( scope.enablePan === false ) return;
                                handleMouseDownPan( event );
                                state = STATE.PAN;

                            } else {

                                if ( scope.enableRotate === false ) return;
                                handleMouseDownRotate( event );
                                state = STATE.ROTATE;

                            }

                            break;
                        case THREE.MOUSE.PAN:
                            if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

                                if ( scope.enableRotate === false ) return;
                                handleMouseDownRotate( event );
                                state = STATE.ROTATE;

                            } else {

                                if ( scope.enablePan === false ) return;
                                handleMouseDownPan( event );
                                state = STATE.PAN;

                            }

                            break;
                        default:
                            state = STATE.NONE;

                    }

                    if ( state !== STATE.NONE ) {

                        scope.dispatchEvent( _startEvent );

                    }

                }

                function onMouseMove( event ) {

                    switch ( state ) {

                        case STATE.ROTATE:
                            if ( scope.enableRotate === false ) return;
                            handleMouseMoveRotate( event );
                            break;
                        case STATE.DOLLY:
                            if ( scope.enableZoom === false ) return;
                            handleMouseMoveDolly( event );
                            break;
                        case STATE.PAN:
                            if ( scope.enablePan === false ) return;
                            handleMouseMovePan( event );
                            break;

                    }

                }

                function onMouseWheel( event ) {

                    if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;
                    event.preventDefault();
                    scope.dispatchEvent( _startEvent );
                    handleMouseWheel( event );
                    scope.dispatchEvent( _endEvent );

                }

                function onKeyDown( event ) {

                    if ( scope.enabled === false || scope.enablePan === false ) return;
                    handleKeyDown( event );

                }

                function onTouchStart( event ) {

                    trackPointer( event );
                    switch ( pointers.length ) {

                        case 1:
                            switch ( scope.touches.ONE ) {

                                case THREE.TOUCH.ROTATE:
                                    if ( scope.enableRotate === false ) return;
                                    handleTouchStartRotate();
                                    state = STATE.TOUCH_ROTATE;
                                    break;
                                case THREE.TOUCH.PAN:
                                    if ( scope.enablePan === false ) return;
                                    handleTouchStartPan();
                                    state = STATE.TOUCH_PAN;
                                    break;
                                default:
                                    state = STATE.NONE;

                            }

                            break;
                        case 2:
                            switch ( scope.touches.TWO ) {

                                case THREE.TOUCH.DOLLY_PAN:
                                    if ( scope.enableZoom === false && scope.enablePan === false ) return;
                                    handleTouchStartDollyPan();
                                    state = STATE.TOUCH_DOLLY_PAN;
                                    break;
                                case THREE.TOUCH.DOLLY_ROTATE:
                                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;
                                    handleTouchStartDollyRotate();
                                    state = STATE.TOUCH_DOLLY_ROTATE;
                                    break;
                                default:
                                    state = STATE.NONE;

                            }

                            break;
                        default:
                            state = STATE.NONE;

                    }

                    if ( state !== STATE.NONE ) {

                        scope.dispatchEvent( _startEvent );

                    }

                }

                function onTouchMove( event ) {

                    trackPointer( event );
                    switch ( state ) {

                        case STATE.TOUCH_ROTATE:
                            if ( scope.enableRotate === false ) return;
                            handleTouchMoveRotate( event );
                            scope.update();
                            break;
                        case STATE.TOUCH_PAN:
                            if ( scope.enablePan === false ) return;
                            handleTouchMovePan( event );
                            scope.update();
                            break;
                        case STATE.TOUCH_DOLLY_PAN:
                            if ( scope.enableZoom === false && scope.enablePan === false ) return;
                            handleTouchMoveDollyPan( event );
                            scope.update();
                            break;
                        case STATE.TOUCH_DOLLY_ROTATE:
                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;
                            handleTouchMoveDollyRotate( event );
                            scope.update();
                            break;
                        default:
                            state = STATE.NONE;

                    }

                }

                function onContextMenu( event ) {

                    if ( scope.enabled === false ) return;
                    event.preventDefault();

                }

                function addPointer( event ) {

                    pointers.push( event );

                }

                function removePointer( event ) {

                    delete pointerPositions[ event.pointerId ];
                    for ( let i = 0; i < pointers.length; i ++ ) {

                        if ( pointers[ i ].pointerId == event.pointerId ) {

                            pointers.splice( i, 1 );
                            return;

                        }

                    }

                }

                function trackPointer( event ) {

                    let position = pointerPositions[ event.pointerId ];
                    if ( position === undefined ) {

                        position = new THREE.Vector2();
                        pointerPositions[ event.pointerId ] = position;

                    }

                    position.set( event.pageX, event.pageY );

                }

                function getSecondPointerPosition( event ) {

                    const pointer = event.pointerId === pointers[ 0 ].pointerId ? pointers[ 1 ] : pointers[ 0 ];
                    return pointerPositions[ pointer.pointerId ];

                }

                //

                scope.domElement.addEventListener( 'contextmenu', onContextMenu );
                scope.domElement.addEventListener( 'pointerdown', onPointerDown );
                scope.domElement.addEventListener( 'pointercancel', onPointerCancel );
                scope.domElement.addEventListener( 'wheel', onMouseWheel, {
                    passive: false
                } );

                // force an update at start

                this.update();

            }

        }

        // This set of controls performs orbiting, dollying (zooming), and panning.
        // Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
        // This is very similar to OrbitControls, another set of touch behavior
        //
        //    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate
        //    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
        //    Pan - left mouse, or arrow keys / touch: one-finger move

        class MapControls extends OrbitControls {

            constructor( object, domElement ) {

                super( object, domElement );
                this.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up

                this.mouseButtons.LEFT = THREE.MOUSE.PAN;
                this.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;
                this.touches.ONE = THREE.TOUCH.PAN;
                this.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;

            }

        }

        THREE.MapControls = MapControls;
        THREE.OrbitControls = OrbitControls;

    } )();

    crapblox = {}

    crapblox.toggle3D = {}

    crapblox.toggle3D.test = async () => {
        return crapblox.threeDee.draw("#thumbnail-container", "user", 1, 250, 250)
    }

    crapblox.threeDee = {}

    crapblox.threeDee.draw = async (container, assetType, assetId, width, height) => {
        // load assets
        let assets = await fetch(window.location.origin + `/API/Update/3DRender/` + assetId)
        assets = await assets.json()

        let obj = assets.files['scene.obj'].content
        let mtl = assets.files['scene.mtl'].content

        var camera, scene, renderer, player, id, pivot, grabbing = null

        function render()
        {
            renderer.render(scene, camera)
        }

        function animate()
        {
            id = requestAnimationFrame(animate)

            if (player != null && !grabbing)  {
                pivot.rotation.y += 0.01
            }

            render()
        }

        pivot = new THREE.Group()

        renderer = new THREE.WebGLRenderer({
            alpha: true,
            antialias: true,
            sortObjects: false
        })
        renderer.setPixelRatio(window.devicePixelRatio)
        renderer.setSize(width, height)

        scene = new THREE.Scene()
        camera = new THREE.PerspectiveCamera(70, width / height, 0.1, 100)
        camera.position.z = 7
        scene.add(camera)

        // lighting
        scene.add(new THREE.AmbientLight(0x878780))

        let light1 = new THREE.DirectionalLight(0xACACAC)
        light1.position.set(-.671597898, .671597898, .312909544).normalize() // wtf, roblox
        scene.add(light1)

        let light2 = new THREE.DirectionalLight(0x444444)
        light2.position.set((new THREE.Vector3).copy(light1.position).negate().normalize())
        scene.add(light2)

        // why must you hardcode everything
        //new THREE.MTLLoader().load("/API/Update/3DRender/" + assetId + "?mtl=true", (materials) => {
        //    materials.preload()
        //.setMaterials(materials)

            new THREE.OBJLoader().load("data:text/plain:base64," + obj, (object) => {
                player = object

                let box = new THREE.Box3().setFromObject(player)
                let controls = new THREE.OrbitControls(camera, renderer.domElement)
                controls.target.copy(player.position)

                let center = new THREE.Vector3()
                player.position.multiplyScalar(-1)

                box.getCenter(center)
                player.position.sub(center)

                // pivot will center
                scene.add(pivot)
                pivot.add(player)
            })
        //})

        $(container).append(renderer.domElement)
        $(renderer.domElement).css("display", "").addClass("d-none").attr("id", "three-dee-canvas")
        $(".spinner-border.text-dark").css({"display": "none"});

        $(renderer.domElement).on("mousedown touchstart", () => { grabbing = true })
        $(renderer.domElement).on("mouseup touchend", () => { grabbing = false })

        animate()
    }

    ;(async ()=>{
        let res = await crapblox.toggle3D.test();
        console.log(res)
    })();

</script>

<style>
    .d-none {
        position: absolute;
    }

    .spinner-border {
        width: 100px;
        height: 50px;
        margin: auto;
        margin-top: 50%;
        z-index: 3;
        position: relative;
    }
</style>
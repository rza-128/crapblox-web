-- Start Game Script Arguments

------------------- UTILITY FUNCTIONS --------------------------

local cdnSuccess = 0
local cdnFailure = 0

function waitForChild(parent, childName)
while true do
local child = parent:findFirstChild(childName)
if child then
return child
end
parent.ChildAdded:wait()
end
end

-- returns the player object that killed this humanoid
-- returns nil if the killer is no longer in the game
function getKillerOfHumanoidIfStillInGame(humanoid)

-- check for kill tag on humanoid - may be more than one - todo: deal with this
local tag = humanoid:findFirstChild("creator")

-- find player with name on tag
if tag then
local killer = tag.Value
if killer.Parent then -- killer still in game
return killer
end
end

return nil
end
-----------------------------------END UTILITY FUNCTIONS -------------------------

-----------------------------------"CUSTOM" SHARED CODE----------------------------------

pcall(function() settings().Network.UseInstancePacketCache = true end)
pcall(function() settings().Network.UsePhysicsPacketCache = true end)
pcall(function() settings()["Task Scheduler"].PriorityMethod = Enum.PriorityMethod.AccumulatedError end)


settings().Network.PhysicsSend = Enum.PhysicsSendMethod.TopNErrors
settings().Network.ExperimentalPhysicsEnabled = true
settings().Network.WaitingForCharacterLogRate = 100
pcall(function() settings().Diagnostics:LegacyScriptMode() end)

-----------------------------------START GAME SHARED SCRIPT------------------------------

-- establish this peer as the Server
local ns = game:GetService("NetworkServer")

local badgeUrlFlagExists, badgeUrlFlagValue = pcall(function () return settings():GetFFlag("NewBadgeServiceUrlEnabled") end)
local newBadgeUrlEnabled = badgeUrlFlagExists and badgeUrlFlagValue
local url = "http://www.dungblx.cf"
if url~=nil then
pcall(function() game:GetService("Players"):SetAbuseReportUrl(url .. "/AbuseReport/InGameChatHandler.ashx") end)
pcall(function() game:GetService("ScriptInformationProvider"):SetAssetUrl(url .. "/Asset/") end)
pcall(function() game:GetService("ContentProvider"):SetBaseUrl(url .. "/") end)
-- pcall(function() game:GetService("Players"):SetChatFilterUrl(url .. "/Game/ChatFilter.ashx") end)

if gameCode then
game:SetVIPServerId(tostring(gameCode))
end

game:GetService("BadgeService"):SetPlaceId({{ Game.id }})
game:SetPlaceId({{ Game.id }})
game:SetCreatorId({{ User.id }}, Enum.CreatorType.User)


if newBadgeUrlEnabled then
game:GetService("BadgeService"):SetAwardBadgeUrl(apiProxyUrl .. "/assets/award-badge?userId=%d&badgeId=%d&placeId=%d")
end

if access~=nil then
if not newBadgeUrlEnabled then
game:GetService("BadgeService"):SetAwardBadgeUrl(url .. "/Game/Badge/AwardBadge.ashx?UserID=%d&BadgeID=%d&PlaceID=%d&" .. access)
end

game:GetService("BadgeService"):SetHasBadgeUrl(url .. "/Game/Badge/HasBadge.ashx?UserID=%d&BadgeID=%d&" .. access)
game:GetService("BadgeService"):SetIsBadgeDisabledUrl(url .. "/Game/Badge/IsBadgeDisabled.ashx?BadgeID=%d&PlaceID=%d&" .. access)

game:GetService("FriendService"):SetMakeFriendUrl(url .. "/Game/CreateFriend?firstUserId=%d&secondUserId=%d")
game:GetService("FriendService"):SetBreakFriendUrl(url .. "/Game/BreakFriend?firstUserId=%d&secondUserId=%d")
game:GetService("FriendService"):SetGetFriendsUrl(url .. "/Game/AreFriends?userId=%d")
end
game:GetService("BadgeService"):SetIsBadgeLegalUrl("")
game:GetService("InsertService"):SetBaseSetsUrl(url .. "/Game/Tools/InsertAsset.ashx?nsets=10&type=base")
game:GetService("InsertService"):SetUserSetsUrl(url .. "/Game/Tools/InsertAsset.ashx?nsets=20&type=user&userid=%d")
game:GetService("InsertService"):SetCollectionUrl(url .. "/Game/Tools/InsertAsset.ashx?sid=%d")
game:GetService("InsertService"):SetAssetUrl(url .. "/Asset/?id=%d")
game:GetService("InsertService"):SetAssetVersionUrl(url .. "/Asset/?assetversionid=%d")
game:GetService("InsertService"):SetTrustLevel(0)

pcall(function() loadfile(url .. "/Game/LoadPlaceInfo.ashx?PlaceId=" .. placeId)() end)

pcall(function()
if access then
loadfile(url .. "/Game/PlaceSpecificScript.ashx?PlaceId=" .. placeId .. "&" .. access)()
end
end)
end

pcall(function() game:GetService("NetworkServer"):SetIsPlayerAuthenticationRequired(true) end)
settings().Diagnostics.LuaRamLimit = 0



if placeId~=nil and killID~=nil and deathID~=nil and url~=nil then
-- listen for the death of a Player
function createDeathMonitor(player)
-- we don't need to clean up old monitors or connections since the Character will be destroyed soon
if player.Character then
local humanoid = waitForChild(player.Character, "Humanoid")
humanoid.Died:connect(
function ()
onDied(player, humanoid)
end
)
end
end

-- listen to all Players' Characters
game:GetService("Players").ChildAdded:connect(
function (player)
createDeathMonitor(player)
player.Changed:connect(
function (property)
if property=="Character" then
createDeathMonitor(player)
end
end
)
end
)
end

local Players = game:GetService("Players")
local MAINSTRING = "" -- the data
game:GetService("Players").PlayerAdded:connect(function(player)
function update(LeavingPlayer)
local names = {} -- make table for turning into string
for _, player in pairs(Players:GetPlayers()) do
if (player ~= LeavingPlayer) then -- if player is not currently leaving
table.insert(names, player.Name)
end
end

-- Ugly? Too bad!
local str = (#names > 0) and (#names > 1) and (names[1] .. ",") or names[1] or "" -- if no players, return "". if one player, return name itself. if more, then start string sequence.
for i = 2, #names -1, 1 do -- loop only starts if >2 players
str = str .. names[i] .. ","
end
str = (#names > 0) and (#names > 1) and (str .. names[#names]) or names[1] or "" -- if "" or single player, remain. if more, end string without comma

MAINSTRING = str -- define mainstring for website stuff
end

update(nil)

local http = game:GetService("HttpService")
http.HttpEnabled = true
local url = "http://dungblx.cf/API/KeepAlive"
print("Player " .. player.userId .. " added")
local data = {
["ServerIP"] = "{{ Game.server_token }}",
["PlaceId"] = game.PlaceId,
["PlayerCount"] = #game.Players:GetChildren(),
["PlayerList"] = MAINSTRING,
}

data = http:JSONEncode(data)
response = http:PostAsync(url, data)

if url and access and placeId and player and player.userId then
game:HttpGet(url .. "/Game/ClientPresence.ashx?action=connect&" .. access .. "&PlaceID=" .. placeId .. "&UserID=" .. player.userId)
game:HttpPost(url .. "/Game/PlaceVisit.ashx?UserID=" .. player.userId .. "&AssociatedPlaceID=" .. placeId .. "&" .. access, "")
end
end)


game:GetService("Players").PlayerRemoving:connect(function(player)
function update(LeavingPlayer)
local names = {} -- make table for turning into string
for _, player in pairs(Players:GetPlayers()) do
if (player ~= LeavingPlayer) then -- if player is not currently leaving
table.insert(names, player.Name)
end
end

-- Ugly? Too bad!
local str = (#names > 0) and (#names > 1) and (names[1] .. ",") or names[1] or "" -- if no players, return "". if one player, return name itself. if more, then start string sequence.
for i = 2, #names -1, 1 do -- loop only starts if >2 players
str = str .. names[i] .. ","
end
str = (#names > 0) and (#names > 1) and (str .. names[#names]) or names[1] or "" -- if "" or single player, remain. if more, end string without comma

MAINSTRING = str -- define mainstring for website stuff
end

update(player)
print("Player " .. player.userId .. " leaving")
local http = game:GetService("HttpService")
http.HttpEnabled = true
local url = "http://dungblx.cf/API/KeepAlive"
local data = {
["ServerIP"] = "{{ Game.server_token }}",
["PlaceId"] = game.PlaceId,
["PlayerCount"] = #game.Players:GetChildren() - 1,
["PlayerList"] = MAINSTRING,
}

data = http:JSONEncode(data)
response = http:PostAsync(url, data)

if url and access and placeId and player and player.userId then
game:HttpGet(url .. "/Game/ClientPresence.ashx?action=disconnect&" .. access .. "&PlaceID=" .. placeId .. "&UserID=" .. player.userId)
end
end)

-- Now start the connection
game:Load("rbxasset://temp.rbxl")
ns:Start(25564, sleeptime)
pcall(function() game.LocalSaveEnabled = true end)

-- StartGame --
Game:GetService("RunService"):Run()